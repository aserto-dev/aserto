// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cc

import (
	"context"
	"github.com/aserto-dev/aserto/pkg/auth0"
	"github.com/aserto-dev/aserto/pkg/cc/clients"
	"github.com/aserto-dev/aserto/pkg/cc/config"
	"github.com/aserto-dev/aserto/pkg/cc/iostream"
	"github.com/aserto-dev/aserto/pkg/cc/token"
	"github.com/aserto-dev/aserto/pkg/decision_logger"
	"github.com/google/wire"
	"io"
)

// Injectors from wire.go:

func BuildCommonCtx(configPath config.Path, overrides ...config.Overrider) (*CommonCtx, error) {
	contextContext := context.Background()
	configConfig, err := config.NewConfig(configPath, overrides...)
	if err != nil {
		return nil, err
	}
	configContext := configConfig.Context
	services := &configConfig.Services
	auth := configConfig.Auth
	cacheKey := GetCacheKey(auth)
	cachedToken := token.Load(cacheKey)
	asertoFactory, err := clients.NewClientFactory(contextContext, configContext, services, cachedToken)
	if err != nil {
		return nil, err
	}
	xServices := configConfig.Services
	settings := NewAuthSettings(auth)
	decisionloggerConfig := &configConfig.DecisionLogger
	decisionloggerSettings := decisionlogger.NewSettings(decisionloggerConfig)
	stdIO := iostream.DefaultIO()
	ui := iostream.NewUI(stdIO)
	commonCtx := &CommonCtx{
		Factory:        asertoFactory,
		Context:        contextContext,
		Environment:    xServices,
		CustomContext:  configContext,
		Auth:           settings,
		CachedToken:    cachedToken,
		DecisionLogger: decisionloggerSettings,
		UI:             ui,
	}
	return commonCtx, nil
}

func BuildTestCtx(ioStreams iostream.IO, configReader io.Reader, overrides ...config.Overrider) (*CommonCtx, error) {
	contextContext := context.TODO()
	configConfig, err := config.NewTestConfig(configReader, overrides...)
	if err != nil {
		return nil, err
	}
	configContext := configConfig.Context
	services := &configConfig.Services
	auth := configConfig.Auth
	cacheKey := GetCacheKey(auth)
	cachedToken := token.Load(cacheKey)
	asertoFactory, err := clients.NewClientFactory(contextContext, configContext, services, cachedToken)
	if err != nil {
		return nil, err
	}
	xServices := configConfig.Services
	settings := NewAuthSettings(auth)
	decisionloggerConfig := &configConfig.DecisionLogger
	decisionloggerSettings := decisionlogger.NewSettings(decisionloggerConfig)
	ui := iostream.NewUI(ioStreams)
	commonCtx := &CommonCtx{
		Factory:        asertoFactory,
		Context:        contextContext,
		Environment:    xServices,
		CustomContext:  configContext,
		Auth:           settings,
		CachedToken:    cachedToken,
		DecisionLogger: decisionloggerSettings,
		UI:             ui,
	}
	return commonCtx, nil
}

// wire.go:

var (
	commonSet = wire.NewSet(iostream.NewUI, GetCacheKey, token.Load, NewAuthSettings, decisionlogger.NewSettings, clients.NewClientFactory, wire.Bind(new(clients.Factory), new(*clients.AsertoFactory)), wire.FieldsOf(new(*config.Config), "Services", "Context", "Auth", "DecisionLogger"), wire.Struct(new(CommonCtx), "*"))

	ccSet = wire.NewSet(
		commonSet, iostream.DefaultIO, context.Background, config.NewConfig, wire.Bind(new(iostream.IO), new(*iostream.StdIO)),
	)

	ccTestSet = wire.NewSet(
		commonSet, context.TODO, config.NewTestConfig,
	)
)

func GetCacheKey(auth *config.Auth) token.CacheKey {
	return token.CacheKey(auth.Issuer)
}

func NewAuthSettings(auth *config.Auth) *auth0.Settings {
	return auth.GetSettings()
}
